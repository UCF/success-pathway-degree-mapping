@model List<DegreeMapping.Models.CourseMapper>
@{ 
    int degreeId = ViewBag.DegreeId;
    DegreeMapping.Models.Degree d = DegreeMapping.Models.Degree.Get(degreeId);
}
<div class="container py-5">
    <a name="CourseMapper">&nbsp;</a>
    <h2 class="heading-underline">Course Mapper for @d.Institution</h2>
    <table class="table table-hover">
        <thead>
            <tr>
                <th>&nbsp;</th>
                <th>&nbsp;</th>
                <th>UCF Courses</th>
                <th>Partner Courses</th>
                <th>@Html.ActionLink("Add Course Map", "CourseMapperAdd", "App", new { degreeId = ViewBag.degreeId }, new { @Class = "btn btn-primary btn-lg" })</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Count > 0)
            {
                int SortOrderValue = 1000;
                foreach (DegreeMapping.Models.CourseMapper cm in Model.OrderBy(x => x.SortOrder))
                {
                    <tr id="someRow_@cm.Id" coursemapperId="@cm.Id" ordervalue="@cm.SortOrder">
                        <td>
                            <input type="hidden" id="@cm.Id" name="preOrder" value="@SortOrderValue" />
                            <a href="javascript:void(0)" class="up"><i class="fa fa-arrow-alt-circle-up"></i></a>
                            <a href="javascript:void(0)" class="down"><i class="fa fa-arrow-alt-circle-down"></i></a>
                            <div>@cm.Id | @cm.SortOrder</div>
                        </td>
                        <td>
                            @Html.ActionLink("Edit", "CourseMapperEdit", "App", new { id = cm.Id }, null)
                        </td>
                        <td>
                            @Html.Action("_CourseMapperListView", "App", new { title = cm.DisplayName, list_courses = cm.UCFCourses })
                            @Html.Action("_CourseMapperListView", "App", new { title = cm.AlternateDisplayName, list_courses = cm.AlternateUCFCourses })
                            @Html.Action("_CourseMapperListView", "App", new { title = cm.Alternate2DisplayName, list_courses = cm.Alternate2UCFCourses })
                            @Html.Action("_CourseMapperListView", "App", new { title = cm.Alternate3DisplayName, list_courses = cm.Alternate3UCFCourses })
                            @Html.Action("_CourseMapperListView", "App", new { title = cm.Alternate4DisplayName, list_courses = cm.Alternate4UCFCourses })

                        </td>
                        <td>
                            @Html.Action("_CourseMapperListView", "App", new { title = cm.DisplayName, list_courses = cm.PartnerCourses })
                            @Html.Action("_CourseMapperListView", "App", new { title = cm.AlternateDisplayName, list_courses = cm.AlternatePartnerCourses })
                            @Html.Action("_CourseMapperListView", "App", new { title = cm.Alternate2DisplayName, list_courses = cm.Alternate2PartnerCourses })
                            @Html.Action("_CourseMapperListView", "App", new { title = cm.Alternate3DisplayName, list_courses = cm.Alternate3PartnerCourses })
                            @Html.Action("_CourseMapperListView", "App", new { title = cm.Alternate4DisplayName, list_courses = cm.Alternate4PartnerCourses })
                        </td>
                        <td>
                            @Html.ActionLink("Delete", "CourseMapperDelete", "App", new { id = cm.Id, degreeId = cm.DegreeId }, new { @Class = "btn btn-danger btn-lg", onclick = "return confirm('Are you sure you wish to delete this course map?');" })
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
<script type="text/javascript">
    var obj;
    var maxSortOrder = @Model.Max(x => x.SortOrder);
    var minSortOrder = @Model.Min(x => x.SortOrder);

    $(document).ready(function () {
        $(".up,.down").click(function () {
            let row = $(this).parents("tr:first");
            let el = $(this).siblings('input');
            let currentOrderValue;
            let nextOrderValue;
            let prevOrderValue;
            var courseMapperId = parseInt($(el).attr('id'));

            if ($(this).is(".up")) {
                currentOrderValue = parseInt($(row).attr('orderValue'));
                prevOrderValue = parseInt($(row.prev()).attr('orderValue'));
                if (minSortOrder == prevOrderValue) {
                    minSortOrder = minSortOrder - 1;
                    prevOrderValue = minSortOrder;
                }
                UpdateSortOrder($(row).attr('coursemapperId'), prevOrderValue, 'up');
                UpdateSortOrder($(row.prev()).attr('coursemapperId'), currentOrderValue, 'up');

                $(row).attr('orderValue', prevOrderValue);
                $(row.prev()).attr('orderValue', currentOrderValue);
                row.insertBefore(row.prev());
            } else {
                currentOrderValue = parseInt($(row.next()).attr('orderValue'));
                nextOrderValue = parseInt($(row.next()).attr('orderValue'));
                if (maxSortOrder == nextOrderValue) {
                    maxSortOrder = maxSortOrder + 1;
                    nextOrderValue = maxSortOrder;
                }
                UpdateSortOrder($(row).attr('coursemapperId'), nextOrderValue, 'down');
                UpdateSortOrder($(row.next()).attr('coursemapperId'), currentOrderValue, 'down');
                //update attribute
                $(row.next()).attr('orderValue', nextOrderValue);
                $(row.next()).attr('orderValue', currentOrderValue);
                row.insertAfter(row.next());
            }
        })
    })

        function UpdateSortOrder(courseMapperId, sortOrderVal, direction) {
            $.get({
                //url: "https://portal.connect.ucf.edu/pathway/api/v2/DegreeMap/getCustomCourseMapper?degreeId=" + ucfSemesterTerm.degreeId,
                url: "/app/CourseMapperSortOrderUpdate/?courseMapperId=" + courseMapperId + "&sortOrderValue=" + sortOrderVal,
                type: "GET",
                cache: false,
                async: false,
                success: function (data) {
                    //do something
                }
            }).done(function (data) {
                // do something
            }).fail(function (message) {
                alert(message);
            }) 
        }
</script>