@model DegreeMapping.Models.Course
@{
    DegreeMapping.Models.Degree d = DegreeMapping.Models.Degree.Get(Model.DegreeId);


    List<DegreeMapping.Models.Course> list_course = new List<DegreeMapping.Models.Course>();
    if (d.UCFDegreeId.HasValue)
    {
        list_course = DegreeMapping.Models.Course.List(d.UCFDegreeId.Value).Where(x => x.Semester <= 1).ToList();
    }
}

@using (Html.BeginForm("CodeSave", "App", FormMethod.Post, new { @Class = "form-inline" }))
{
    @Html.HiddenFor(x => x.Id)
    @Html.HiddenFor(x => x.DegreeId)
    @Html.HiddenFor(x => x.UCFRelatedCourse)
    <div class="row pt-5">
        <div class="col-md-5">
            <div class="form-group">
                @Model.Id | @Html.LabelFor(x => x.Code) :
                @Html.TextBoxFor(x => x.Code, new { @class = "form-control", required = "required" })
                <button class="btn btn-success" type="submit">Update</button>
            </div>
        </div>
    </div>
    @Html.HiddenFor(x => x.Name)
    @Html.HiddenFor(x => x.Credits)
    @Html.HiddenFor(x => x.Active)
    @Html.HiddenFor(x => x.Critical)
    @Html.HiddenFor(x => x.CommonProgramPrerequiste)
    @Html.HiddenFor(x => x.Required)
    @Html.HiddenFor(x => x.Semester)
    @Html.HiddenFor(x => x.Description)
}
