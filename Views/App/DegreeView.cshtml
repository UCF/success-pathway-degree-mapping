@model DegreeMapping.Models.Degree
@{
    List<DegreeMapping.Models.Course> list_c = DegreeMapping.Models.Course.List(Model.Id);
    List<DegreeMapping.Models.Note> list_n = DegreeMapping.Models.Note.List(Model.Id);
    string cssClass = (string.IsNullOrEmpty(Model.Description)) ? "" : "alert alert-warning";
    bool noCourseMapped = true;

    if (Model.UCFDegreeId.HasValue)
    {
        DegreeMapping.Models.Degree ucfDegree = DegreeMapping.Models.Degree.Get(Model.UCFDegreeId.Value);
        Model.DegreeURL = (!string.IsNullOrEmpty(Model.DegreeURL)) ? Model.DegreeURL : ucfDegree.DegreeURL;
        Model.CollegeName = (!string.IsNullOrEmpty(Model.CollegeName)) ? Model.CollegeName : ucfDegree.CollegeName;
    }
}

<div class="row pt-5">
    <div class="col-md-12">
        <small>@Html.ActionLink("Degree list", "Checklist", "App") <span class="glyphicon glyphicon-arrow-right"></span> @Html.ActionLink(Model.Institution, "InstitutionView", new { id = Model.InstitutionId })</small>
        <h1>@Model.Institution : @Html.Raw(Model.Name)</h1>
    </div>
</div>

<div class="row pt-5">
    <div class="col-md-6">
        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(x => x.Active) : @(Model.Active?"Yes":"No")
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(x => x.CollegeName) : @Html.Raw(Model.CollegeName)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(x => x.DegreeURL) :
                @if (!string.IsNullOrEmpty(Model.DegreeURL))
                {
                    <a href="@Html.Raw(Model.DegreeURL)" target="_blank">@Html.Raw(Model.DegreeURL)</a>
                }
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(x => x.GPA) : @Model.GPA
            </div>
        </div>

        <div class="form-group hidden">
            <div class="col-md-10">
                @Html.LabelFor(x => x.DegreeType) : @Html.Raw(Model.DegreeType)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(x => x.LimitedAccess) : @(Model.LimitedAccess?"Yes":"No")
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(x => x.RestrictedAccess) : @(Model.RestrictedAccess?"Yes":"No")
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10 @cssClass">
                @Html.LabelFor(x => x.Description) : @Html.Raw(Model.Description)
            </div>
        </div>


        <div class="form-group hidden">
            <div class="col-md-10">
                @Html.LabelFor(x => x.CatalogYear) : @Model.CatalogYear
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.ActionLink("Edit Degree", "DegreeEdit", "App", new { id = Model.Id }, null)
            </div>
        </div>
    </div>
    @if (Model.InstitutionId > 1)
    {
        <div class="col-md-6">
            <h2 class="pt-5">UCF Related Degree</h2>
            @if (string.IsNullOrEmpty(Model.UCFDegreeName))
            {
                <div>
                    Not Assigned
                </div>
            }
            else
            {
                <div>
                    Degree is mapped to UCF @Model.UCFDegreeName
                </div>
            }
        </div>
    }
</div>
<div class="row py-5 px-5">
    <div class="col-md-6" style="border:4px solid red">
        <div>
            <h3>@Model.Institution Courses</h3>
            @Html.ActionLink("Add Course", "CourseAdd", "App", new { degreeId = Model.Id }, null)
        </div>
        @if (list_c.Count > 0)
        {
            int semester = 0;
            string fullSemester = string.Empty;
            <ul>
                @foreach (DegreeMapping.Models.Course c in list_c.OrderBy(x => x.Semester).ThenBy(x=>x.Term).ThenBy(x => x.Code))
                {
                    if (Model.InstitutionId != DegreeMapping.Models.Institution.UCFId)
                    {
                        continue;
                    }
                    string warning = (string.IsNullOrEmpty(c.Description)) ? "" : "<i class=\"fas fa-exclamation-triangle\"></i>";
                    cssClass = (string.IsNullOrEmpty(c.Description)) ? "" : "alert alert-warning";
                    //if (semester != c.Semester)
                    if (fullSemester != string.Format("{0} {1}", c.Semester, c.Term))
                    {
                        //semester = c.Semester;
                        fullSemester = string.Format("{0} {1}", c.Semester, c.Term);
                        <li style="list-style:none; margin-left:-20px"><strong>Semester @fullSemester</strong></li>
                    }
                    if (c.UCFCourseId == null && c.InstitutionId != DegreeMapping.Models.Institution.UCFId)
                    {
                        noCourseMapped = false;
                        <li class="@cssClass">
                            @Html.Raw(warning) <span style="color:red">❌</span>
                            @Html.ActionLink(c.Code, "CourseView", new { id = c.Id })
                        </li>
                    }
                    else
                    {
                        <li class="@cssClass">
                            @Html.Raw(warning) @Html.ActionLink(c.Code, "CourseView", new { id = c.Id })
                        </li>
                    }
                }
            </ul>
        }
        @if (!noCourseMapped)
        {
            <div>
                <span style="color:red">❌</span> - Course is not mapped
            </div>
        }
    </div>
    <div class="col-md-6">
        @if (Model.InstitutionId == DegreeMapping.Models.Institution.UCFId)
        {
            <div>
                <h3>@Model.Institution Notes/Requirements</h3>
                @Html.ActionLink("Add Note", "NoteAdd", new { degreeId = Model.Id })
            </div>
            if (list_n.Count > 0)
            {
                <ul>
                    @foreach (DegreeMapping.Models.Note n in list_n)
                    {
                        <li>
                            @Html.ActionLink(n.Name, "NoteView", new { id = n.Id })
                        </li>
                    }
                </ul>
            }
        }
        else
        {
            <div>
                <h3>@Model.Institution Notes/Requirements</h3>
                @Html.ActionLink("Add Item", "NoteAdd", new { degreeId = Model.Id })
            </div>
            if (list_n.Count > 0)
            {
                <ul>
                    @foreach (DegreeMapping.Models.Note n in list_n)
                    {
                        if (n.NoteType.Equals(DegreeMapping.Models.Note.NoteTypeValue.ListItem))
                        {
                            <li>
                                @Html.ActionLink(n.Name, "NoteView", new { id = n.Id })
                            </li>
                        }
                    }
                </ul>
            }

        }
    </div>
</div>
@*SECTION FOR PARTNER INSTITUTION*@
@if (Model.InstitutionId != DegreeMapping.Models.Institution.UCFId && list_c.Count > 0)
{
    <div class="row py-2">
        <div class="col-md-12 px-5 py-5">
            <h2 class="heading-underline">Course List</h2>
            <table class="table">
                <thead>
                    <tr>
                        <th>&nbsp;</th>
                        @*<th>UCF Course</th>*@
                        @*<th>Units / Credits</th>*@
                        <th>Partner Course</th>
                        <th>Credits</th>
                        <th>Critical Course</th>
                        <th>Common Program Prerequisite (CPP)</th>
                        <th>Required Core Course</th>
                        <th>
                            @Html.ActionLink("Add Course", "CourseAdd", "App", new { degreeId = Model.Id }, new { @Class="btn btn-primary btn-lg"})
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        noCourseMapped = false;
                    }
                    @foreach (DegreeMapping.Models.Course c in list_c.OrderBy(x => x.UCFRelatedCourse))
                    {
                        if (string.IsNullOrEmpty(c.UCFRelatedCourse))
                        {
                            noCourseMapped = true;
                        }
                        cssClass = (string.IsNullOrEmpty(c.UCFRelatedCourse)) ? "alert alert-warning" : "";
                        <tr class="@cssClass">
                            <td>@Html.ActionLink("Edit", "CourseEdit", new { id = c.Id })</td>
                            @*<td>@Html.Raw(c.UCFRelatedCourse)</td>*@
                            @*<td>@c.UCFCourseCredits</td>*@
                            <td>@c.Code</td>
                            <td>@c.Credits</td>
                            <td>@(c.Critical ? "Yes" : "No")</td>
                            <td>@(c.CommonProgramPrerequiste ? "Yes" : "No")</td>
                            <td>@(c.Required ? "Yes" : "No")</td>
                            <td>
                                @Html.ActionLink("Delete", "CourseDelete", "App", new { id = c.Id, degreeId = Model.Id }, new { @Class = "btn btn-danger btn-lg", onclick = "return confirm('Are you sure you wish to delete this course and course mappings?');" })
                            </td>
                        </tr>
                    }

                </tbody>
            </table>
            @if (noCourseMapped)
            {
                <div class="alert alert-warning fas fa-exclamation-triangle"> Course not mapped</div>
            }
        </div>
    </div>
}

@*For version 3.0*@
@if (Model.InstitutionId != DegreeMapping.Models.Institution.UCFId)
{
    @Html.Action("_CourseMapperList", new { degreeId = Model.Id })
}